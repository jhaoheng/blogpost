<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.5">Jekyll</generator><link href="https://jhaoheng.github.io/blogpost/blogpost/atom.xml" rel="self" type="application/atom+xml" /><link href="https://jhaoheng.github.io/blogpost/blogpost/" rel="alternate" type="text/html" /><updated>2019-09-14T22:01:44+08:00</updated><id>https://jhaoheng.github.io/blogpost/blogpost/atom.xml</id><title type="html">MAX 呼~</title><subtitle>Welcome!</subtitle><author><name>Max Hu</name></author><entry><title type="html">【Go】Time(一):Timer(定時器)</title><link href="https://jhaoheng.github.io/blogpost/blogpost/golang/2019/09/14/Go-time(1)-timer/" rel="alternate" type="text/html" title="【Go】Time(一):Timer(定時器)" /><published>2019-09-14T21:53:00+08:00</published><updated>2019-09-14T21:53:00+08:00</updated><id>https://jhaoheng.github.io/blogpost/blogpost/golang/2019/09/14/%5BGo%5Dtime(1)-timer</id><content type="html" xml:base="https://jhaoheng.github.io/blogpost/blogpost/golang/2019/09/14/Go-time(1)-timer/">&lt;h1 id=&quot;type-timer&quot;&gt;type Timer&lt;/h1&gt;
&lt;blockquote&gt;
  &lt;p&gt;https://golang.org/pkg/time/#Timer&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;type Timer struct {
	C &amp;lt;-chan Time
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Timer 類型是一種事件，當 Timer 到期，目前的時間會送到 &lt;code class=&quot;highlighter-rouge&quot;&gt;C&lt;/code&gt; 中，除非 Timer 被 &lt;code class=&quot;highlighter-rouge&quot;&gt;AfterFunc&lt;/code&gt; 重新建立。&lt;/li&gt;
  &lt;li&gt;Timer 必須透過 NewTimer or AfterFunc 建立&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;table-list&quot;&gt;Table list&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;func AfterFunc&lt;/code&gt; : 建立一個 Timer 並在時間到後，執行 Func&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;func NewTimer&lt;/code&gt; : 建立一個 Timer&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;func (*Timer) Reset&lt;/code&gt; : 重設置 Timer&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;func (*Timer) Stop&lt;/code&gt; : 命令 Timer 停止&lt;/li&gt;
  &lt;li&gt;範例
    &lt;ul&gt;
      &lt;li&gt;Timer 第一次到期為兩秒後, 到期後自動設定 t.Reset(10), 再度自動倒數&lt;/li&gt;
      &lt;li&gt;每次執行 t.Reset() 後, 到期, 都會重新設定 t.Reset()&lt;/li&gt;
      &lt;li&gt;按下 Enter 後, Timer 會直接中斷倒數, 並且再度重新執行 t.Reset()&lt;/li&gt;
      &lt;li&gt;ctrl+c 停止運行&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;func-afterfunc&quot;&gt;func AfterFunc&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;func AfterFunc(d Duration, f func()) *Timer&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;func AfterFunc&lt;/code&gt; : 建立一個 Timer, 當時間到的時候，會呼叫 f() 在 Timer 自己的 goroutine 中。可以用 Stop 來停止。&lt;/li&gt;
  &lt;li&gt;若執行 stop, stop 並不會等待 f 完成後才停止, 若需要判斷 f 是否完成任務, 必須做其他的判斷處置.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;func main() {
	var t *time.Timer
	f := func() {
		fmt.Printf(&quot;Expiration time : %v.\n&quot;, time.Now())
		fmt.Printf(&quot;C`s len: %d\n&quot;, len(t.C))
	}
	t = time.AfterFunc(2*time.Second, f)

	var stop string
	fmt.Scanln(&amp;amp;stop)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;func-newtimer&quot;&gt;func NewTimer&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;func NewTimer(d Duration) *Timer&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;func NewTimer&lt;/code&gt; : 建立一個 new Timer, 會將目前的時間送到 C 中 (C 是 Timer struct 的 channel)&lt;/li&gt;
  &lt;li&gt;所以可以透過 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;-t.C&lt;/code&gt; 來等待時間到期&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;func main() {
	// init
	t := time.NewTimer(2 * time.Second)
	// Current time
	now := time.Now()
	fmt.Printf(&quot;time : %v.\n&quot;, now)

	expire := &amp;lt;-t.C
	fmt.Printf(&quot;time : %v.\n&quot;, expire)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;func-timer-stop&quot;&gt;func (*Timer) Stop&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;func (t *Timer) Stop() bool&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;func (*Timer) Stop&lt;/code&gt; : 用於’主動’停止計時器, 當 Timer 尚未停止的時候調用&lt;/li&gt;
  &lt;li&gt;若 timer 已經停止，則 t.Stop() 會返回 false&lt;/li&gt;
  &lt;li&gt;stop 並不會 close the channel, 為了防止不正確地讀取 channel, 所以為了要確保在呼叫 stop() 後 channel 是空的, 必須確認 stop() 的 return, 若是 false, 則必須讓 channel 為空。&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;if !t.Stop() {
	&amp;lt;-t.C // 釋放掉 channel 的物件
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Stop() 並不會停止其他 Timer’s channel&lt;/li&gt;
  &lt;li&gt;對於透過 AfterFunc(d,f) 產生的 Timer, 若 t.Stop() 返回 false (代表 timer 已經過期, 且 f 已經在他自己的 goroutine 啟動), Stop 並不會等待 f 完成. 若需要知道 f 是否已經完成, 必須在 f 中做一些協調處理.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;func-timer-reset&quot;&gt;func (*Timer) Reset&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;func (t *Timer) Reset(d Duration) bool&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;Reset 的調用, 有兩個條件
    &lt;ol&gt;
      &lt;li&gt;timer 必須停止或者過期&lt;/li&gt;
      &lt;li&gt;channel 必須為空&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;Reset 的使用前, 若 Timer 的狀態是過期或已經停止, 則必須確定 t.C 的 channel 為空.&lt;/li&gt;
  &lt;li&gt;程式可以透過 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;-t.C&lt;/code&gt; 來判斷是否時間到期，此時 channel 為空, 在此狀況下, t.Reset() 可以直接被使用.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;func main() {
	now := time.Now()
	fmt.Printf(&quot;           time: %v.\n&quot;, now)

	t := time.NewTimer(2 * time.Second)
	expire := &amp;lt;-t.C
	fmt.Printf(&quot;Expiration time: %v.\n&quot;, expire)
	t.Reset(5 * time.Second)
	expire = &amp;lt;-t.C
	fmt.Printf(&quot;Expiration time: %v.\n&quot;, expire)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;若程式沒有從 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;-t.C&lt;/code&gt; 中接收參數, 但 timer 卻已經使用 stop(), 此時必須讓 channel 為空, 才可以使用.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;if !t.Stop() {
	&amp;lt;-t.C
}
t.Reset(d)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;example&quot;&gt;Example&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;p&gt;無法透過 go playground, 因為無法讀取 Enter 鍵&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
	&lt;span class=&quot;s2&quot;&gt;&quot;fmt&quot;&lt;/span&gt;
	&lt;span class=&quot;s2&quot;&gt;&quot;time&quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TimerObj&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;timeStart&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Time&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;resetTimeIs&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Duration&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;           &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Timer&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;timerObj&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TimerObj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;timeStart&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;resetTimeIs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;           &lt;span class=&quot;p&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NewTimer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Second&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;make&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;chan&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;stop&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;string&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Scanln&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&amp;amp;&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;stop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;reset&quot;&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}()&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Second&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;showCurrentTime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;timerObj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;. Interrupt Timer!!!!!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;resetTimer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;timerObj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;timerObj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;時間到期&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;showCurrentTime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;timerObj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;. Time up, auto reset Timer&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;resetTimer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;timerObj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;showCurrentTime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;timerObj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;showCurrentTime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;timerObj&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TimerObj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;=====&amp;gt; %v&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Sub&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;timerObj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;timeStart&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;resetTimer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;timerObj&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TimerObj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;timerObj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Stop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Timer Stop Success!!  &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Timer Reset %v&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;timerObj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;resetTimeIs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Second&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;timerObj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;timerObj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;resetTimeIs&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Second&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;timerObj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;timeStart&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;[執行結果]
=====&amp;gt; 1.002051028s
=====&amp;gt; 2.006385502s. Time up, auto reset Timer
Timer Reset 10s
=====&amp;gt; 1.002283105s
=====&amp;gt; 2.005053556s
=====&amp;gt; 3.007041044s
=====&amp;gt; 4.009081465s&lt;/p&gt;

&lt;p&gt;=====&amp;gt; 5.010377978s. Interrupt Timer!!!!!
Timer Stop Success!!  Timer Reset 10s
=====&amp;gt; 1.003484026s
^Csignal: interrupt&lt;/p&gt;</content><author><name>Max Hu</name></author><category term="Golang" /><summary type="html">type Timer https://golang.org/pkg/time/#Timer type Timer struct { C &amp;lt;-chan Time } Timer 類型是一種事件，當 Timer 到期，目前的時間會送到 C 中，除非 Timer 被 AfterFunc 重新建立。 Timer 必須透過 NewTimer or AfterFunc 建立 Table list func AfterFunc : 建立一個 Timer 並在時間到後，執行 Func func NewTimer : 建立一個 Timer func (*Timer) Reset : 重設置 Timer func (*Timer) Stop : 命令 Timer 停止 範例 Timer 第一次到期為兩秒後, 到期後自動設定 t.Reset(10), 再度自動倒數 每次執行 t.Reset() 後, 到期, 都會重新設定 t.Reset() 按下 Enter 後, Timer 會直接中斷倒數, 並且再度重新執行 t.Reset() ctrl+c 停止運行</summary></entry><entry><title type="html">【Go】Defer, Panic &amp;amp; Recover</title><link href="https://jhaoheng.github.io/blogpost/blogpost/golang/2019/09/11/Go-DeferPanicRecover/" rel="alternate" type="text/html" title="【Go】Defer, Panic &amp; Recover" /><published>2019-09-11T13:18:00+08:00</published><updated>2019-09-11T13:18:00+08:00</updated><id>https://jhaoheng.github.io/blogpost/blogpost/golang/2019/09/11/%5BGo%5DDeferPanicRecover</id><content type="html" xml:base="https://jhaoheng.github.io/blogpost/blogpost/golang/2019/09/11/Go-DeferPanicRecover/">&lt;h1 id=&quot;synopsis&quot;&gt;Synopsis&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;defer {動作} : 當前 func 結束後，會執行的動作。&lt;/li&gt;
  &lt;li&gt;panic() : 當執行，會強迫中斷程式，並輸出錯誤訊息。&lt;/li&gt;
  &lt;li&gt;recover() : 當 panic 發生後，無論錯誤在多深層的結構中，都會透過 recover() 取回當前的 error (不用逐層 return)，並讓程序繼續執行。&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;測試&quot;&gt;測試&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;在網路上多數的範例都是在於開啟檔案、連線失敗的使用方式&lt;/li&gt;
  &lt;li&gt;這邊提供另一種使用範例&lt;/li&gt;
&lt;/ul&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;範例&quot;&gt;範例&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;假設我們在一個深層的遞迴中，發生了 panic，要回傳錯誤訊息，並讓程式不因為 panic，而中斷 process&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ol&gt;
  &lt;li&gt;設定 Layer/TriggerError 變數，用 pointer 送入到 func
    &lt;ul&gt;
      &lt;li&gt;Layer : 用於觀察數字變動&lt;/li&gt;
      &lt;li&gt;TriggerError : 設定於該次的 function 呼叫時，產生 error，並啟動 panic&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;透過 defer 在 work() 結束後, 執行動作&lt;/li&gt;
  &lt;li&gt;透過 recover(), 在 panic() 發生後, 將 error 抓回來&lt;/li&gt;
  &lt;li&gt;最後在 main() 中，輸出 “hello world”&lt;/li&gt;
&lt;/ol&gt;

&lt;div&gt;
    &lt;iframe src=&quot;https://play.golang.org/p/ADukYaPNS_B&quot; height=&quot;600&quot; width=&quot;560&quot; allowfullscreen=&quot;&quot; frameborder=&quot;1&quot;&gt;
    &lt;/iframe&gt;
&lt;/div&gt;

&lt;h2 id=&quot;觀察結果&quot;&gt;觀察結果&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;當刪除 &lt;code class=&quot;highlighter-rouge&quot;&gt;recover()&lt;/code&gt; 這一段; 且 &lt;code class=&quot;highlighter-rouge&quot;&gt;TriggerError != 0&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;會造成 process 強迫中斷, 會看到錯誤訊息, 但無法看到接下來的訊息&lt;/li&gt;
      &lt;li&gt;work() 結束後, 也無法返回 main 中&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;當 &lt;code class=&quot;highlighter-rouge&quot;&gt;TriggerError == 0&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;不會執行 recursion&lt;/li&gt;
      &lt;li&gt;會看到沒有錯誤訊息&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;The [Layer] value in 'defer' is : 999&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;TriggerError != 0&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;輸出 panic 的 error&lt;/li&gt;
      &lt;li&gt;輸出 &lt;code class=&quot;highlighter-rouge&quot;&gt;The [Layer] value in 'defer' is : X&lt;/code&gt;, X 是該 func 被執行的次數&lt;/li&gt;
      &lt;li&gt;跳回 main(), 顯示 &lt;code class=&quot;highlighter-rouge&quot;&gt;Hello World&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;結論&quot;&gt;結論&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;所以當要執行某個工作時，不用刻意的使用 return 回傳錯誤訊息&lt;/li&gt;
  &lt;li&gt;透過 defer, panic, recovery 可以設計出更優雅、容錯、可讀性高的程式&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Max Hu</name></author><category term="Golang" /><summary type="html">Synopsis defer {動作} : 當前 func 結束後，會執行的動作。 panic() : 當執行，會強迫中斷程式，並輸出錯誤訊息。 recover() : 當 panic 發生後，無論錯誤在多深層的結構中，都會透過 recover() 取回當前的 error (不用逐層 return)，並讓程序繼續執行。 測試 在網路上多數的範例都是在於開啟檔案、連線失敗的使用方式 這邊提供另一種使用範例</summary></entry><entry><title type="html">【Go】利用 struct 優化（二）:interface</title><link href="https://jhaoheng.github.io/blogpost/blogpost/golang/2019/09/10/Go-struct-%E5%84%AA%E5%8C%96(%E4%BA%8C)-interface/" rel="alternate" type="text/html" title="【Go】利用 struct 優化（二）:interface" /><published>2019-09-10T19:11:00+08:00</published><updated>2019-09-10T19:11:00+08:00</updated><id>https://jhaoheng.github.io/blogpost/blogpost/golang/2019/09/10/%5BGo%5Dstruct-%E5%84%AA%E5%8C%96(%E4%BA%8C)-interface</id><content type="html" xml:base="https://jhaoheng.github.io/blogpost/blogpost/golang/2019/09/10/Go-struct-%E5%84%AA%E5%8C%96(%E4%BA%8C)-interface/">&lt;h1 id=&quot;sypnosis&quot;&gt;Sypnosis&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://jhaoheng.github.io/blogpost/golang/2019/09/10/Go-struct-%E5%84%AA%E5%8C%96/&quot;&gt;【Go】利用 struct 優化（一）&lt;/a&gt;後，可以得知&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;使用 struct 讓物件統一，更容易理解&lt;/li&gt;
  &lt;li&gt;使用 pointer 來提高 memory 的使用效率&lt;/li&gt;
  &lt;li&gt;使用 func as method 讓程式碼更容易被閱讀&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;以下為相關程式碼&lt;/p&gt;

&lt;div&gt;
    &lt;iframe src=&quot;https://play.golang.org/p/D0_Jvfq5da8&quot; height=&quot;315&quot; width=&quot;560&quot; allowfullscreen=&quot;&quot; frameborder=&quot;1&quot;&gt;
    &lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;接下來的問題是&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;兩邊都有相同的 method, read(), 如何建立一個統一的接口, 再執行某 func, for ex:
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;db read&lt;/code&gt; : 不同的 db 都會有 read 的 method&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;sign in&lt;/code&gt; : 不同的登入方法, 但可能是 jwt, facebook, email 等&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;notification&lt;/code&gt; : 不同的 notification 進行設計 (ios,android,aws,極光…)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;接續 1, 在實踐上, 再把 func 變成 method, 讓可讀性變高&lt;/li&gt;
&lt;/ol&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;1-發現兩者都有-area-的-method&quot;&gt;1. 發現兩者都有 area() 的 method&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;在程式中, 我們可以用 interface{} 來將兩者的 method 包在一起, 以方便一起處理某些事情&lt;/li&gt;
  &lt;li&gt;範例程式碼&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;1-1-定義-interface&quot;&gt;1-1 定義 interface&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;在 struct 中, 定義 fields&lt;/li&gt;
  &lt;li&gt;在 interface 中, 定義 &lt;code class=&quot;highlighter-rouge&quot;&gt;method set&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;type Shape interface {
	area() float64
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;定義好 interface, 接下來就是透過 func 來實踐『特定功能』, 這邊舉一個簡單的例子 &lt;code class=&quot;highlighter-rouge&quot;&gt;showArea()&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;其他例子的使用，例如 : 發送 notification 後，驗證錯誤訊息&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;在 func 中使用 interfcae type 當作參數送給 function&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;func showArea(shapes ...Shape) {
	for _, s := range shapes {
		fmt.Println(s.area())
	}
}
// main
func main() {
	// init
	c := Circle{5}
	r := Rectangle{Coordinate{0, 0}, Coordinate{10, 10}}

	// Show
	showArea(&amp;amp;c, &amp;amp;r)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;1-2-範例程式碼&quot;&gt;1-2 範例程式碼&lt;/h3&gt;
&lt;div&gt;
    &lt;iframe src=&quot;https://play.golang.org/p/e8AgZllGKwB&quot; height=&quot;315&quot; width=&quot;560&quot; allowfullscreen=&quot;&quot; frameborder=&quot;1&quot;&gt;
    &lt;/iframe&gt;
&lt;/div&gt;

&lt;h2 id=&quot;2-將-func-定義成-method&quot;&gt;2. 將 func 定義成 method&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;定義一個新的類型 &lt;code class=&quot;highlighter-rouge&quot;&gt;type MultiShape struct{}&lt;/code&gt;, 負責存放所有的 shapes&lt;/li&gt;
  &lt;li&gt;將 func -&amp;gt; method&lt;/li&gt;
  &lt;li&gt;範例程式碼&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;2-1-定義-multishape&quot;&gt;2-1 定義 MultiShape&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;type MultiShape struct {
	shapes []Shape
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;2-2-接下來將-func-改成-method-並宣告物件-m&quot;&gt;2-2 接下來將 func 改成 method, 並宣告物件 m&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;func (m *MultiShape) showArea() {
	for _, s := range m.shapes {
		fmt.Println(s.area())
	}
}

// main
func main() {
	// init
	c := Circle{5}
	r := Rectangle{Coordinate{0, 0}, Coordinate{10, 10}}

	// Show
	m := MultiShape{
		[]Shape{&amp;amp;c, &amp;amp;r},
	}
	m.showArea()
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;2-3-範例程式碼&quot;&gt;2-3 範例程式碼&lt;/h3&gt;
&lt;blockquote&gt;
  &lt;p&gt;額外添加添加 name()&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div&gt;
    &lt;iframe src=&quot;https://play.golang.org/p/wD9xvycXuOc&quot; height=&quot;315&quot; width=&quot;560&quot; allowfullscreen=&quot;&quot; frameborder=&quot;1&quot;&gt;
    &lt;/iframe&gt;
&lt;/div&gt;

&lt;h1 id=&quot;延伸問題&quot;&gt;延伸問題&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;如何添加周長?&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Max Hu</name></author><category term="Golang" /><summary type="html">Sypnosis 【Go】利用 struct 優化（一）後，可以得知 使用 struct 讓物件統一，更容易理解 使用 pointer 來提高 memory 的使用效率 使用 func as method 讓程式碼更容易被閱讀 以下為相關程式碼 接下來的問題是 兩邊都有相同的 method, read(), 如何建立一個統一的接口, 再執行某 func, for ex: db read : 不同的 db 都會有 read 的 method sign in : 不同的登入方法, 但可能是 jwt, facebook, email 等 notification : 不同的 notification 進行設計 (ios,android,aws,極光…) 接續 1, 在實踐上, 再把 func 變成 method, 讓可讀性變高</summary></entry><entry><title type="html">【Go】利用 struct 優化（一）</title><link href="https://jhaoheng.github.io/blogpost/blogpost/golang/2019/09/10/Go-struct-%E5%84%AA%E5%8C%96/" rel="alternate" type="text/html" title="【Go】利用 struct 優化（一）" /><published>2019-09-10T13:51:00+08:00</published><updated>2019-09-10T13:51:00+08:00</updated><id>https://jhaoheng.github.io/blogpost/blogpost/golang/2019/09/10/%5BGo%5Dstruct%20%E5%84%AA%E5%8C%96</id><content type="html" xml:base="https://jhaoheng.github.io/blogpost/blogpost/golang/2019/09/10/Go-struct-%E5%84%AA%E5%8C%96/">&lt;h2 id=&quot;synopsis&quot;&gt;Synopsis&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;透過 struct 方式，容易看懂程式&lt;/li&gt;
  &lt;li&gt;透過 pointer 方式，降低 memory 的使用 (雖然在程式結束後，會自動回收用不到的 memory)&lt;/li&gt;
  &lt;li&gt;使用 func as method 方式，讓程式碼在 func 使用上更容易被理解&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;example&quot;&gt;Example&lt;/h1&gt;
&lt;p&gt;一般來說，如果要用程式碼計算『圓形面積』、『長方形面積』，可以用一些簡單的方式攥寫&lt;/p&gt;

&lt;div&gt;
    &lt;iframe src=&quot;https://play.golang.org/p/fzSt0Hz56WP&quot; height=&quot;315&quot; width=&quot;560&quot; allowfullscreen=&quot;&quot; frameborder=&quot;1&quot;&gt;
    &lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;但回頭看這個程式碼，會發現&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;如果要追蹤『rx1, ry1, rx2, ry2』或者『cx, cy, cr』當程式碼一長 or 複雜，就很難理解這個參數的意義&lt;/li&gt;
  &lt;li&gt;儘管有寫註解，在 function 中，一樣很難快速理解&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;解決方案 : 使用 struct 來幫助理解&lt;/p&gt;

&lt;!--more--&gt;

&lt;h1 id=&quot;use-struct&quot;&gt;use struct&lt;/h1&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;struct&lt;/code&gt; 是一種 &lt;code class=&quot;highlighter-rouge&quot;&gt;type&lt;/code&gt;, 它包含了名稱的欄位, 例如：可以把 Rectangle 寫成如下方式&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;type Coordinate struct {
	x float64
	y float64
}

type Rectangle struct {
	start Coordinate
	end   Coordinate
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;新增一個 Coordinate 的物件, 類型(type)是 struct, 裡面夾帶 (x,y) 欄位&lt;/li&gt;
  &lt;li&gt;新增一個 Rectangle, 類型(type)是 struct 的物件, 裡面夾帶 ‘起始座標’ 與 ‘結束座標’&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;宣告方法可以有以下幾種&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ol&gt;
  &lt;li&gt;以下都相同，跟 (2) 不同的是，返回是一個指標
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;r := new(Rectangle)&lt;/code&gt;, 而 new 的主要作用是為 type 申請 memory，並&lt;code class=&quot;highlighter-rouge&quot;&gt;返回指向 memory 的指標&lt;/code&gt;。&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;r := &amp;amp;Rectangle{}&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;以下也都相同
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;var r Rectangle&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;r := Rectangle{}&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;r := Rectangle{Coordinate{}, Coordinate{}}&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;r := Rectangle{ start: Coordinate{}, end:   Coordinate{},}&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;優化開始&quot;&gt;優化開始&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;steps
    &lt;ol&gt;
      &lt;li&gt;將 func() 參數物件改為傳遞 struct&lt;/li&gt;
      &lt;li&gt;將 func() 中 strct 設定為指標&lt;/li&gt;
      &lt;li&gt;function as a method&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;1-將-func-參數物件改為傳遞-struct&quot;&gt;1. 將 func() 參數物件改為傳遞 struct&lt;/h2&gt;

&lt;p&gt;從上面的基本操作，建立了 Rectangle 物件, type 是 struct
所以將 rectangleArea() 與 distance() 變更為&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;func rectangleArea(r Rectangle) float64 {
	l := r.end.x - r.start.x
	w := r.end.y - r.start.y
	return l * w
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;在 main 中, 可以改為, 如此可以輕鬆地理解 r 來自於 Rectangle 這個結構中的欄位&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;r := Rectangle{
	start: Coordinate{
		x: 1,
		y: 1,
	},
	end: Coordinate{
		x: 10,
		y: 10,
	},
}
fmt.Println(rectangleArea(r))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;2-將-func-中-strct-設定為指標&quot;&gt;2. 將 func() 中 strct 設定為指標&lt;/h2&gt;
&lt;p&gt;以上 func 中, 重新宣告了一個 Rectangle 的物件
可以使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;fmt.Printf(&quot;%p\n&quot;, ThePointer)&lt;/code&gt; 查看記憶體位置的變化&lt;/p&gt;

&lt;p&gt;for example&lt;/p&gt;

&lt;pre&gt;
0xc00009c000 &amp;lt;= main 中的 Rectangle
0xc00009c020 &amp;lt;= func 中的 Rectangle
&lt;/pre&gt;

&lt;p&gt;但可以用 pointer, 避免重複宣告並佔用 memory, 浪費資源&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;func rectangleArea(r *Rectangle) float64 {
    fmt.Printf(&quot;%p&quot;, r) // 因為這邊的 r 已經是 pointer
	l := r.end.x - r.start.x
	w := r.end.y - r.start.y
	return l * w
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;在 main 中&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;r := Rectangle{
	start: Coordinate{
		x: 1,
		y: 1,
	},
	end: Coordinate{
		x: 10,
		y: 10,
	},
}
fmt.Printf(&quot;%p\n&quot;, &amp;amp;r)
fmt.Println(rectangleArea(&amp;amp;r))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;3-function-as-a-method&quot;&gt;3. function as a method&lt;/h2&gt;
&lt;p&gt;解決了以上的問題，會發現&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;rectangle 與 circle 都有 area, 雖然可以在命名上作區別, 但有更好的方法
且可以透過 &lt;code class=&quot;highlighter-rouge&quot;&gt;.&lt;/code&gt; 的方式, 快速地在編輯器上引用此 method&lt;/li&gt;
  &lt;li&gt;在 main 中，帶入的物件是 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;amp;r&lt;/code&gt; 會有點難以理解&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
  &lt;p&gt;將 rectangleArea() 改為 rectangle 的 method&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;func (r *Rectangle) area() float64 {
	fmt.Printf(&quot;%p\n&quot;, r)
	l := r.end.x - r.start.x
	w := r.end.y - r.start.y
	return l * w
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;在 main 中&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;fmt.Println(r.area())
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;優化結束&quot;&gt;優化結束&lt;/h2&gt;

&lt;div&gt;
    &lt;iframe src=&quot;https://play.golang.org/p/ZQ3xAB8o5R9&quot; height=&quot;315&quot; width=&quot;560&quot; allowfullscreen=&quot;&quot; frameborder=&quot;1&quot;&gt;
    &lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;這是一個簡短的例子，當我們將功能越寫越多時，程式碼會越複雜
我們可以透過此方法達成以下三個目的&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;透過 struct 方式，容易看懂程式&lt;/li&gt;
  &lt;li&gt;透過 pointer 方式，降低 memory 的使用 (雖然在程式結束後，會自動回收用不到的 memory)&lt;/li&gt;
  &lt;li&gt;使用 func as method 方式，讓程式碼在 func 使用上更容易被理解&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;結論&quot;&gt;結論&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;過於複雜的參數傳遞，雖然我們可以用命名方式來釐清，但名稱越長，也會使程式碼難以理解&lt;/li&gt;
  &lt;li&gt;優化並非將程式碼縮短(但的確在大型架構下，可以縮短，並更容易理解)&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;問題&quot;&gt;問題&lt;/h1&gt;
&lt;p&gt;一個人裡有各種資訊物件，身分證、健保卡、護照，都用在不同的地方，也都有各自的 ID
可以透過 struct 將 『身分證、健保卡、護照』 各自建立起來，用在不同的目的上
但是否有方法整合這些物件？&lt;/p&gt;

&lt;p&gt;參考下篇: &lt;a href=&quot;https://jhaoheng.github.io/blogpost/golang/2019/09/10/Go-struct-%E5%84%AA%E5%8C%96(%E4%BA%8C)-interface/&quot;&gt;struct優化（二）:interface&lt;/a&gt;&lt;/p&gt;</content><author><name>Max Hu</name></author><category term="Golang" /><summary type="html">Synopsis 透過 struct 方式，容易看懂程式 透過 pointer 方式，降低 memory 的使用 (雖然在程式結束後，會自動回收用不到的 memory) 使用 func as method 方式，讓程式碼在 func 使用上更容易被理解 Example 一般來說，如果要用程式碼計算『圓形面積』、『長方形面積』，可以用一些簡單的方式攥寫 但回頭看這個程式碼，會發現 如果要追蹤『rx1, ry1, rx2, ry2』或者『cx, cy, cr』當程式碼一長 or 複雜，就很難理解這個參數的意義 儘管有寫註解，在 function 中，一樣很難快速理解 解決方案 : 使用 struct 來幫助理解</summary></entry><entry><title type="html">【Go】Drill interface{}</title><link href="https://jhaoheng.github.io/blogpost/blogpost/golang/2019/09/07/Go-drill-interface/" rel="alternate" type="text/html" title="【Go】Drill interface{}" /><published>2019-09-07T16:17:00+08:00</published><updated>2019-09-07T16:17:00+08:00</updated><id>https://jhaoheng.github.io/blogpost/blogpost/golang/2019/09/07/%5BGo%5Ddrill%20interface%7B%7D</id><content type="html" xml:base="https://jhaoheng.github.io/blogpost/blogpost/golang/2019/09/07/Go-drill-interface/">&lt;h1 id=&quot;interface&quot;&gt;interface{}&lt;/h1&gt;

&lt;h2 id=&quot;explore&quot;&gt;Explore&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;When set object is an interface{}&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ol&gt;
  &lt;li&gt;Set object is an interface{}&lt;/li&gt;
  &lt;li&gt;Use pointer to set object value is int / string / struct / slice&lt;/li&gt;
  &lt;li&gt;Print kind / address / type / value&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;conclusion&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;interface{}&lt;/code&gt; is changed by each time setting, but the address is not changed.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;for-example&quot;&gt;for example&lt;/h2&gt;

&lt;div&gt;
    &lt;iframe src=&quot;https://play.golang.org/p/7p1DnXwQ9EL&quot; height=&quot;315&quot; width=&quot;600&quot; allowfullscreen=&quot;&quot; frameborder=&quot;1&quot;&gt;
    &lt;/iframe&gt;
&lt;/div&gt;

&lt;!--more--&gt;

&lt;h4 id=&quot;source&quot;&gt;source&lt;/h4&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
	&lt;span class=&quot;s2&quot;&gt;&quot;fmt&quot;&lt;/span&gt;
	&lt;span class=&quot;s2&quot;&gt;&quot;reflect&quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;int&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;int&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;interface&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;printInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;setInt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;setStr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;setStruct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;setSlice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;setInt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;interface&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{})&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;999&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;printInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;setStr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;interface&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{})&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;str&quot;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;printInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;setStruct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;interface&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{})&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;printInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;setSlice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;interface&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{})&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;printInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;printInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;interface&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{})&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;objKind&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reflect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ValueOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Kind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;objType&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Sprintf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;%T&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;objAddress&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Sprintf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;%p&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;*&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;objValue&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;[Kind is : %v]&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;objKind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;% 15v %v&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Address =&amp;gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;objAddress&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;% 15s %v&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Type =&amp;gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;objType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;% 15s %+v&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Value =&amp;gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;objValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>Max Hu</name></author><category term="Golang" /><summary type="html">interface{} Explore When set object is an interface{} Set object is an interface{} Use pointer to set object value is int / string / struct / slice Print kind / address / type / value conclusion The interface{} is changed by each time setting, but the address is not changed. for example</summary></entry><entry><title type="html">【Apache】Proxy &amp;amp; Use Expressions To Restricted Access</title><link href="https://jhaoheng.github.io/blogpost/blogpost/kubenetes/minikube/2019/09/06/Apache-Proxy&UseExpressions/" rel="alternate" type="text/html" title="【Apache】Proxy &amp; Use Expressions To Restricted Access" /><published>2019-09-06T20:30:00+08:00</published><updated>2019-09-06T20:30:00+08:00</updated><id>https://jhaoheng.github.io/blogpost/blogpost/kubenetes/minikube/2019/09/06/%5BApache%5DProxy&amp;UseExpressions</id><content type="html" xml:base="https://jhaoheng.github.io/blogpost/blogpost/kubenetes/minikube/2019/09/06/Apache-Proxy&amp;UseExpressions/">&lt;h1 id=&quot;goal&quot;&gt;Goal&lt;/h1&gt;
&lt;ol&gt;
  &lt;li&gt;80 port proxy to 8080 port. If work, will show ‘proxy’&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;http://localhost:8080&lt;/code&gt; can’t access, must return 404.
    &lt;ul&gt;
      &lt;li&gt;Use &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;If &quot;%{SERVER_PORT} != '80'&quot;&amp;gt; Redirect 404 / &amp;lt;/If&amp;gt;&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;repo--env-set&quot;&gt;Repo &amp;amp; Env Set&lt;/h1&gt;
&lt;blockquote&gt;
  &lt;p&gt;source code : &lt;code class=&quot;highlighter-rouge&quot;&gt;https://github.com/jhaoheng/apacheProxy&amp;amp;UseExpressions&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;docker-compose up -d&lt;/code&gt; &amp;amp;&amp;amp; &lt;code class=&quot;highlighter-rouge&quot;&gt;docker exec -it ubuntu /bin/bash&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;apt-get update&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;apt-get install -y libapache2-mod-proxy-html libxml2-dev apache2 build-essential&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Proxy Modules
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;a2enmod proxy proxy_http proxy_ajp rewrite proxy_balancer proxy_connect proxy_html xml2enc&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;!--more--&gt;

&lt;h1 id=&quot;steps&quot;&gt;Steps&lt;/h1&gt;
&lt;blockquote&gt;
  &lt;p&gt;ref &lt;code class=&quot;highlighter-rouge&quot;&gt;./default.conf&lt;/code&gt; &amp;amp; &lt;code class=&quot;highlighter-rouge&quot;&gt;ports.conf&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;step1--enable-port-8080&quot;&gt;step1 : enable port 8080&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;update &lt;code class=&quot;highlighter-rouge&quot;&gt;ports.conf&lt;/code&gt; in the ‘/etc/apache2/ports’&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Listen 8080&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;step2--set-virtualhost&quot;&gt;step2 : set VirtualHost&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;echo &quot;proxy&quot; &amp;gt; /var/www/proxy/index.html&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;set VirtualHost
```&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&amp;lt;VirtualHost *:8080&amp;gt;
        ServerName localhost
        DocumentRoot /var/www/proxy/
&amp;lt;/VirtualHost&amp;gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
## step3 : set proxy

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h1 id=&quot;proxy&quot;&gt;Proxy&lt;/h1&gt;
&lt;p&gt;ProxyRequests Off
ProxyPass / http://localhost:8080
ProxyPassReverse / http://localhost:8080
ProxyPreserveHost On&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
## step4 : restricted direct connect localhost:8080

&amp;gt; Write below into `&amp;lt;VirtualHost *:8080&amp;gt; ... &amp;lt;/VirtualHost&amp;gt;`

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;AllowCONNECT 80
&amp;lt;If “%{SERVER_PORT} != ‘80’”&amp;gt;
        Redirect 404 /
&amp;lt;/If&amp;gt;
```&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Expressions in Apache HTTP Server
    &lt;ul&gt;
      &lt;li&gt;https://httpd.apache.org/docs/current/expr.html&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;step5--restart--check-it&quot;&gt;step5 : restart &amp;amp; check it&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;apache2ctl restart&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;http://localhost:80&lt;/code&gt;, will show ‘proxy’&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;http://localhost:8080&lt;/code&gt;, be restricted to access&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Max Hu</name></author><category term="Apache" /><summary type="html">Goal 80 port proxy to 8080 port. If work, will show ‘proxy’ http://localhost:8080 can’t access, must return 404. Use &amp;lt;If &quot;%{SERVER_PORT} != '80'&quot;&amp;gt; Redirect 404 / &amp;lt;/If&amp;gt; Repo &amp;amp; Env Set source code : https://github.com/jhaoheng/apacheProxy&amp;amp;UseExpressions docker-compose up -d &amp;amp;&amp;amp; docker exec -it ubuntu /bin/bash apt-get update apt-get install -y libapache2-mod-proxy-html libxml2-dev apache2 build-essential Proxy Modules a2enmod proxy proxy_http proxy_ajp rewrite proxy_balancer proxy_connect proxy_html xml2enc</summary></entry><entry><title type="html">【Golang】func &amp;amp; pointer</title><link href="https://jhaoheng.github.io/blogpost/blogpost/golang/2019/09/06/Go-func&pointer/" rel="alternate" type="text/html" title="【Golang】func &amp; pointer" /><published>2019-09-06T14:31:00+08:00</published><updated>2019-09-06T14:31:00+08:00</updated><id>https://jhaoheng.github.io/blogpost/blogpost/golang/2019/09/06/%5BGo%5Dfunc&amp;pointer</id><content type="html" xml:base="https://jhaoheng.github.io/blogpost/blogpost/golang/2019/09/06/Go-func&amp;pointer/">&lt;h1 id=&quot;kind&quot;&gt;kind&lt;/h1&gt;
&lt;blockquote&gt;
  &lt;p&gt;Different kinds use a pointer to change the value in Func.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;map&lt;/li&gt;
  &lt;li&gt;slice&lt;/li&gt;
  &lt;li&gt;array&lt;/li&gt;
  &lt;li&gt;string&lt;/li&gt;
  &lt;li&gt;struct&lt;/li&gt;
&lt;/ul&gt;

&lt;div&gt;
    &lt;iframe src=&quot;https://play.golang.org/p/sUiGkLDt8vJ&quot; height=&quot;315&quot; width=&quot;560&quot; allowfullscreen=&quot;&quot; frameborder=&quot;1&quot;&gt;
    &lt;/iframe&gt;
&lt;/div&gt;

&lt;!--more--&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;fmt&quot;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mapObj&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;mapObj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;max&quot;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;updateMapObj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mapObj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;   map =&amp;gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mapObj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

	&lt;span class=&quot;p&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;slice&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;sliceObj&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;max&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;updateSliceObj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sliceObj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot; slice =&amp;gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sliceObj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sunny&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

	&lt;span class=&quot;p&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;array&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;arrayObject&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;max&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;updateArrayObj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arrayObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot; array =&amp;gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arrayObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sunny&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

	&lt;span class=&quot;p&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;string&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stringObj&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;string&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;stringObj&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;max&quot;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;updateStringObj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stringObj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;string =&amp;gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stringObj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;999&lt;/span&gt;

	&lt;span class=&quot;p&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;struct&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;srtuctObj&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StructObject&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;srtuctObj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;max&quot;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;updateStructObj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;srtuctObj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;struct =&amp;gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;srtuctObj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sunny&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;updateMapObj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mapObj&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;mapObj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;sunny&quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;updateArrayObj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arrayObject&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;*[&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;arrayObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;sunny&quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;updateSliceObj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sliceObj&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;sliceObj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;sunny&quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;updateStringObj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stringObj&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stringObj&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;sunny&quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StructObject&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;string&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;updateStructObj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;srtuctObj&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;StructObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;srtuctObj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;sunny&quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>Max Hu</name></author><category term="Golang" /><summary type="html">kind Different kinds use a pointer to change the value in Func. map slice array string struct</summary></entry><entry><title type="html">【Golang】Diff - slice &amp;amp; array</title><link href="https://jhaoheng.github.io/blogpost/blogpost/golang/2019/09/06/Go-diff-slice&array/" rel="alternate" type="text/html" title="【Golang】Diff - slice &amp; array" /><published>2019-09-06T14:31:00+08:00</published><updated>2019-09-06T14:31:00+08:00</updated><id>https://jhaoheng.github.io/blogpost/blogpost/golang/2019/09/06/%5BGo%5Ddiff-slice&amp;array</id><content type="html" xml:base="https://jhaoheng.github.io/blogpost/blogpost/golang/2019/09/06/Go-diff-slice&amp;array/">&lt;h1 id=&quot;slice--array-差別&quot;&gt;slice &amp;amp; array 差別&lt;/h1&gt;
&lt;blockquote&gt;
  &lt;p&gt;https://blog.golang.org/go-slices-usage-and-internals&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;array&quot;&gt;Array&lt;/h1&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Go's arrays are values. An array variable denotes the entire array; it is not a pointer to the first array element (as would be the case in C). This means that when you assign or pass around an array value you will make a copy of its contents. (To avoid the copy you could pass a pointer to the array, but then that's a pointer to an array, not an array.) One way to think about arrays is as a sort of struct but with indexed rather than named fields: a fixed-size composite value.
- An array's size is fixed;
- Arrays do not need to be initialized
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;slice&quot;&gt;Slice&lt;/h1&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;The type specification for a slice is []T, where T is the type of the elements of the slice. Unlike an array type, a slice type has no specified length.
A slice can be created with the built-in function called make, which has the signature,
`func make([]T, len, cap) []T`
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;glance--difference-between-both&quot;&gt;Glance : Difference between both&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;兩者在宣告方式不同&lt;/li&gt;
  &lt;li&gt;兩者 type 不同&lt;/li&gt;
  &lt;li&gt;兩者 kind 不同&lt;/li&gt;
  &lt;li&gt;兩者在宣告後, 不設定 content, 印出內容&lt;/li&gt;
  &lt;li&gt;兩者在新增/修改值上不同&lt;/li&gt;
  &lt;li&gt;兩者 func 中，使用原理方式不同&lt;/li&gt;
&lt;/ul&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;兩者在宣告方式不同-&quot;&gt;兩者在宣告方式不同 :&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;array : Go’s arrays are values.
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;var arrObject [4]int&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;arrObject := [4]int{0, 1, 2, 3}&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;arrObject := [...]int{0, 1, 2, 3}&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;slice : 用 make 建立
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;var sliceObject []int&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;sliceObject := []int{}&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;sliceObject := []int{1,2,3,4}&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;兩者-type-不同&quot;&gt;兩者 type 不同&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;array : &lt;code class=&quot;highlighter-rouge&quot;&gt;fmt.Println(reflect.TypeOf(arrObject))&lt;/code&gt;, 顯示 [4]int&lt;/li&gt;
  &lt;li&gt;slice : &lt;code class=&quot;highlighter-rouge&quot;&gt;fmt.Println(reflect.TypeOf(sliceObject))&lt;/code&gt;, 顯示 []int&lt;/li&gt;
&lt;/ul&gt;

&lt;div&gt;
    &lt;iframe src=&quot;https://play.golang.org/p/WLS7doOuphz&quot; height=&quot;315&quot; width=&quot;560&quot; allowfullscreen=&quot;&quot; frameborder=&quot;1&quot;&gt;
    &lt;/iframe&gt;
&lt;/div&gt;

&lt;h2 id=&quot;兩者-kind-不同-&quot;&gt;兩者 kind 不同 :&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;array : &lt;code class=&quot;highlighter-rouge&quot;&gt;fmt.Println(reflect.TypeOf(arrObject).Kind())&lt;/code&gt;, 顯示 array&lt;/li&gt;
  &lt;li&gt;slice : &lt;code class=&quot;highlighter-rouge&quot;&gt;fmt.Println(reflect.TypeOf(sliceObject).Kind())&lt;/code&gt;, 顯示 slice&lt;/li&gt;
&lt;/ul&gt;

&lt;div&gt;
    &lt;iframe src=&quot;https://play.golang.org/p/6BD2qUVm00l&quot; height=&quot;315&quot; width=&quot;560&quot; allowfullscreen=&quot;&quot; frameborder=&quot;1&quot;&gt;
    &lt;/iframe&gt;
&lt;/div&gt;

&lt;h2 id=&quot;兩者在宣告後-不設定-content-印出內容&quot;&gt;兩者在宣告後, 不設定 content, 印出內容&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;array : An array’s size is fixed&lt;/li&gt;
  &lt;li&gt;slice : A slice type has no specified length.&lt;/li&gt;
&lt;/ul&gt;

&lt;div&gt;
    &lt;iframe src=&quot;https://play.golang.org/p/xXnbKIC5WhV&quot; height=&quot;315&quot; width=&quot;560&quot; allowfullscreen=&quot;&quot; frameborder=&quot;1&quot;&gt;
    &lt;/iframe&gt;
&lt;/div&gt;

&lt;h2 id=&quot;兩者在新增修改值上不同&quot;&gt;兩者在新增/修改值上不同&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;array
    &lt;ul&gt;
      &lt;li&gt;arr 長度固定, 無法新增&lt;/li&gt;
      &lt;li&gt;新增、修改 : &lt;code class=&quot;highlighter-rouge&quot;&gt;arrObject[0] = 999&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;slice
    &lt;ul&gt;
      &lt;li&gt;新增 : &lt;code class=&quot;highlighter-rouge&quot;&gt;sliceObject = append(sliceObject, 1,2,3,4)&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;修改 : &lt;code class=&quot;highlighter-rouge&quot;&gt;sliceObject[0] = 999&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div&gt;
    &lt;iframe src=&quot;https://play.golang.org/p/HY7kVBdV-KZ&quot; height=&quot;315&quot; width=&quot;560&quot; allowfullscreen=&quot;&quot; frameborder=&quot;1&quot;&gt;
    &lt;/iframe&gt;
&lt;/div&gt;

&lt;h2 id=&quot;兩者-func-中使用原理方式不同&quot;&gt;兩者 func 中，使用原理方式不同&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;範例中用到的 func, 需要注意 pointer&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;array 在 func 中, 是用 copy 的方式. 故最好用 pointer 的方式在傳遞 array&lt;/li&gt;
  &lt;li&gt;slice 本身就是一個 pointer, 故可以在 func 中, 看到 address 相同&lt;/li&gt;
&lt;/ul&gt;

&lt;div&gt;
    &lt;iframe src=&quot;https://play.golang.org/p/Tt8rJNMjDAm&quot; height=&quot;315&quot; width=&quot;560&quot; allowfullscreen=&quot;&quot; frameborder=&quot;1&quot;&gt;
    &lt;/iframe&gt;
&lt;/div&gt;

&lt;h1 id=&quot;the-same&quot;&gt;The same&lt;/h1&gt;

&lt;h2 id=&quot;兩者在切割方式上相同-&quot;&gt;兩者在切割方式上&lt;strong&gt;相同&lt;/strong&gt; :&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;arr[:2]&lt;/code&gt; = &lt;code class=&quot;highlighter-rouge&quot;&gt;sliceObject[:2]&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;顯示長度上&quot;&gt;顯示長度上&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;array : &lt;code class=&quot;highlighter-rouge&quot;&gt;fmt.Println(len(arrayObject))&lt;/code&gt;, 顯示 4&lt;/li&gt;
  &lt;li&gt;slice : &lt;code class=&quot;highlighter-rouge&quot;&gt;fmt.Println(len(sliceObject))&lt;/code&gt; 顯示 0&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Max Hu</name></author><category term="Golang" /><summary type="html">slice &amp;amp; array 差別 https://blog.golang.org/go-slices-usage-and-internals Array Go's arrays are values. An array variable denotes the entire array; it is not a pointer to the first array element (as would be the case in C). This means that when you assign or pass around an array value you will make a copy of its contents. (To avoid the copy you could pass a pointer to the array, but then that's a pointer to an array, not an array.) One way to think about arrays is as a sort of struct but with indexed rather than named fields: a fixed-size composite value. - An array's size is fixed; - Arrays do not need to be initialized Slice The type specification for a slice is []T, where T is the type of the elements of the slice. Unlike an array type, a slice type has no specified length. A slice can be created with the built-in function called make, which has the signature, `func make([]T, len, cap) []T` Glance : Difference between both 兩者在宣告方式不同 兩者 type 不同 兩者 kind 不同 兩者在宣告後, 不設定 content, 印出內容 兩者在新增/修改值上不同 兩者 func 中，使用原理方式不同</summary></entry><entry><title type="html">【Golang】Go module</title><link href="https://jhaoheng.github.io/blogpost/blogpost/golang/2019/08/31/gomod/" rel="alternate" type="text/html" title="【Golang】Go module" /><published>2019-08-31T20:14:00+08:00</published><updated>2019-08-31T20:14:00+08:00</updated><id>https://jhaoheng.github.io/blogpost/blogpost/golang/2019/08/31/gomod</id><content type="html" xml:base="https://jhaoheng.github.io/blogpost/blogpost/golang/2019/08/31/gomod/">&lt;h1 id=&quot;環境&quot;&gt;環境&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;go version go1.12.9 darwin/amd64&lt;/li&gt;
  &lt;li&gt;官方教學 : https://github.com/golang/go/wiki/Modules#quick-start&lt;/li&gt;
&lt;/ul&gt;

&lt;!--more--&gt;

&lt;h1 id=&quot;啟用方式&quot;&gt;啟用方式&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;支援 GO 1.11 以後版本
    &lt;ul&gt;
      &lt;li&gt;確認版本 &lt;code class=&quot;highlighter-rouge&quot;&gt;go version&lt;/code&gt;，檢查環境變數 : &lt;code class=&quot;highlighter-rouge&quot;&gt;go env&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;調用方式有兩種
    &lt;ul&gt;
      &lt;li&gt;在 GOPATH 外，確定 GO111MODULE 沒有設定或者設定為 auto，並在專案中建立 go.mod&lt;/li&gt;
      &lt;li&gt;在 GOPAHT 中，設定 &lt;code class=&quot;highlighter-rouge&quot;&gt;export GO111MODULE=on&lt;/code&gt;，就可直接在 GOPATH 中使用&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;使用&quot;&gt;使用&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;p&gt;可參考快速使用 https://github.com/golang/go/wiki/Modules#quick-start&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;1-建立-repo&quot;&gt;1. 建立 repo&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ mkdir -p /tmp/scratchpad/repo
$ cd /tmp/scratchpad/repo
$ git init -q
$ git remote add origin https://github.com/my/repo
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;2-初始化-go-module&quot;&gt;2. 初始化 go module&lt;/h2&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ go mod init github.com/my/repo
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;{github.com/my/repo} : 只是一個對應的名稱&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;3-設定-maingo&quot;&gt;3. 設定 main.go&lt;/h2&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cat&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EOF&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hello&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;go&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;fmt&quot;&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;rsc.io/quote&quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;quote&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Hello&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;EOF&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;4-建立-hello-執行檔&quot;&gt;4. 建立 hello 執行檔&lt;/h2&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ go build -o hello
$ ./hello
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;go build|test|install&lt;/code&gt; : 都會下載 pkg 到 &lt;code class=&quot;highlighter-rouge&quot;&gt;$GOPATH/pkg/mod&lt;/code&gt; 目錄下
    &lt;ul&gt;
      &lt;li&gt;使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;go mod download&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;因為並沒有明確設定 go.mod 中 &lt;code class=&quot;highlighter-rouge&quot;&gt;rsc.io/quote&lt;/code&gt; 的版本，會自動下載最新版本，可以去 go.mod 中檢查變動&lt;/li&gt;
  &lt;li&gt;可以注意到並沒有用 &lt;code class=&quot;highlighter-rouge&quot;&gt;go get&lt;/code&gt; 的指令&lt;/li&gt;
  &lt;li&gt;當想要變更版本，可以使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;go get foo@v1.2.3&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;go get foo@master&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;go get foo@e3702bed2&lt;/code&gt;, 或者直接編輯 &lt;code class=&quot;highlighter-rouge&quot;&gt;go.mod&lt;/code&gt; 然後執行下載.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;一個標準的-gomod&quot;&gt;一個標準的 go.mod&lt;/h1&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;module maxtest
require (
	github.com/joho/godotenv v1.3.0
	rsc.io/quote v1.5.2
)
go 1.12	
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;下載的 go pkg 都會放在 &lt;code class=&quot;highlighter-rouge&quot;&gt;GOPATH/pkg/mod/...&lt;/code&gt; 路徑中&lt;/li&gt;
  &lt;li&gt;gomod 不會在 &lt;code class=&quot;highlighter-rouge&quot;&gt;$GOPATH/src&lt;/code&gt; 目錄下保存 pkg 包的源碼，而是包源碼和鏈接庫保存在 &lt;code class=&quot;highlighter-rouge&quot;&gt;$GOPATH/pkg/mod&lt;/code&gt; 目錄下。&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;一些會用到的相關指令&quot;&gt;一些會用到的相關指令&lt;/h1&gt;
&lt;blockquote&gt;
  &lt;p&gt;https://github.com/golang/go/wiki/Modules#daily-workflow&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;go list -m all&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;查看所有目前 build 後有使用的相依版本(direct and indirect 都會列出)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;go list -u -m all&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;對所有的 direct 與 indirect 相依，查看有效的最小版本與補丁升級。(details)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;go list -u -m -json all&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;用 json 格式顯示詳細資料&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;go get -u&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;go get -u=patch&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;更新所有相依到最新的版本號或者補丁升級(pre-releases 會被忽略)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;go build ./...&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;go test ./...&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;在根目錄執行 build 與 test 會下載 module&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;go mod tidy&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;從 go.mod 中，新增或移除沒用的 modules&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;go mod vendor&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;若你有在使用 vendor, 可使用此指令, 將 modules 複製到 vendor 目錄下&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;其他&quot;&gt;其他&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;go list 只是把 cache 更新, 要用 go mod download 才會下載&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;go mod edit -fmt&lt;/code&gt; : 重新格式化 go.mod 的格式, ex : 如果版本不是 3 位數，會補齊&lt;/li&gt;
  &lt;li&gt;清除下載的 pkg &amp;amp; cache : &lt;code class=&quot;highlighter-rouge&quot;&gt;go clean -i -x -modcache&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;gomod-與-gosum&quot;&gt;go.mod 與 go.sum&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;確保 go.sum 與 go.mod 一起遞交到 git 中&lt;/li&gt;
  &lt;li&gt;For validation purposes, go.sum contains the expected cryptographic checksums of the content of specific module versions.&lt;/li&gt;
  &lt;li&gt;go.sum 是為了驗證目的，go.sum 包含所有指定版本的 cryptographic checksums&lt;/li&gt;
  &lt;li&gt;此外，go.sum 紀錄的 checksums 包含所有 direct 與 indriect 的相依庫，曾經建立過的。因此 go.sum 算是一種歷史紀錄。&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Max Hu</name></author><category term="Golang" /><summary type="html">環境 go version go1.12.9 darwin/amd64 官方教學 : https://github.com/golang/go/wiki/Modules#quick-start</summary></entry><entry><title type="html">【Log】Use Logrotate at ubuntu16.04</title><link href="https://jhaoheng.github.io/blogpost/blogpost/ubuntu/log/2018/10/25/logrotate/" rel="alternate" type="text/html" title="【Log】Use Logrotate at ubuntu16.04" /><published>2018-10-25T07:30:00+08:00</published><updated>2018-10-25T07:30:00+08:00</updated><id>https://jhaoheng.github.io/blogpost/blogpost/ubuntu/log/2018/10/25/logrotate</id><content type="html" xml:base="https://jhaoheng.github.io/blogpost/blogpost/ubuntu/log/2018/10/25/logrotate/">&lt;h1 id=&quot;env--注意&quot;&gt;env &amp;amp; 注意&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;ubuntu&lt;/li&gt;
  &lt;li&gt;必須確認有 cron 服務&lt;/li&gt;
  &lt;li&gt;doc : &lt;code class=&quot;highlighter-rouge&quot;&gt;https://linux.die.net/man/8/logrotate&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;必須確定已經有 log, 若無 log file, 系統會報錯 &lt;code class=&quot;highlighter-rouge&quot;&gt;error: stat of /root/xxxx.log failed: No such file or directory&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;說明&quot;&gt;說明&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;apt-get install -y logrotate&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;配置文件 : &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/logrotate.conf&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;設定檔為至 : &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/logrotate.d/&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;若系統有安裝某些已有日誌的工具, ex:nginx, 會自動在 &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/logrotate.d/&lt;/code&gt; 中, 建立相關的設定&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;檢查設定 &lt;code class=&quot;highlighter-rouge&quot;&gt;sudo logrotate /etc/logrotate.conf --debug&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;logrotate 歷史紀錄 &lt;code class=&quot;highlighter-rouge&quot;&gt;cat /var/lib/logrotate/status&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;強迫 logrotate 立即執行 : &lt;code class=&quot;highlighter-rouge&quot;&gt;logrotate -f /etc/logrotate.conf&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;透過 [logrotate 歷史紀錄] 可查看執行時間&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;主要設定&quot;&gt;主要設定&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;compress             –&amp;gt; 壓縮日誌文件的所有非當前版本&lt;/li&gt;
  &lt;li&gt;daily,weekly,monthly –&amp;gt; 按指定計劃輪換日誌文件&lt;/li&gt;
  &lt;li&gt;delaycompress        –&amp;gt; 壓縮所有版本，除了當前和下一個最近的&lt;/li&gt;
  &lt;li&gt;errors “emailid”     –&amp;gt; 給指定郵箱發送錯誤通知&lt;/li&gt;
  &lt;li&gt;missingok            –&amp;gt; 如果日誌文件丟失，不要顯示錯誤&lt;/li&gt;
  &lt;li&gt;notifempty           –&amp;gt; 如果日誌文件為空，則不輪換日誌文件&lt;/li&gt;
  &lt;li&gt;olddir “dir”         –&amp;gt; 指定日誌文件的舊版本放在 「dir」 中&lt;/li&gt;
  &lt;li&gt;postrotate           –&amp;gt; 引入一個在日誌被輪換後執行的腳本&lt;/li&gt;
  &lt;li&gt;prerotate            –&amp;gt; 引入一個在日誌被輪換前執行的腳本&lt;/li&gt;
  &lt;li&gt;endscript            –&amp;gt; 標記 prerotate 或 postrotate 腳本的結束&lt;/li&gt;
  &lt;li&gt;rotate ‘n’           –&amp;gt; 在輪換方案中包含日誌的 n 個版本&lt;/li&gt;
  &lt;li&gt;sharedscripts        –&amp;gt; 對於整個日誌組只運行一次腳本&lt;/li&gt;
  &lt;li&gt;size=’logsize’       –&amp;gt; 在日誌大小大於 logsize（例如 100K，4M）時輪換&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;ex-&quot;&gt;ex :&lt;/h2&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/tmp/sample_output.log {
	size 1k
	create 700 root root
	rotate 4
	compress
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;ex--nginx&quot;&gt;ex : nginx&lt;/h2&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/var/log/nginx/*.log {
    daily
    missingok
    rotate 52
    compress
    delaycompress
    notifempty
    create 640 nginx adm
    sharedscripts
    postrotate
            if [ -f /var/run/nginx.pid ]; then
                    kill -USR1 `cat /var/run/nginx.pid`
            fi
    endscript
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>Max Hu</name></author><category term="Ubuntu" /><category term="Log" /><summary type="html">env &amp;amp; 注意 ubuntu 必須確認有 cron 服務 doc : https://linux.die.net/man/8/logrotate 必須確定已經有 log, 若無 log file, 系統會報錯 error: stat of /root/xxxx.log failed: No such file or directory 說明 apt-get install -y logrotate 配置文件 : /etc/logrotate.conf 設定檔為至 : /etc/logrotate.d/ 若系統有安裝某些已有日誌的工具, ex:nginx, 會自動在 /etc/logrotate.d/ 中, 建立相關的設定 檢查設定 sudo logrotate /etc/logrotate.conf --debug logrotate 歷史紀錄 cat /var/lib/logrotate/status 強迫 logrotate 立即執行 : logrotate -f /etc/logrotate.conf 透過 [logrotate 歷史紀錄] 可查看執行時間 主要設定 compress –&amp;gt; 壓縮日誌文件的所有非當前版本 daily,weekly,monthly –&amp;gt; 按指定計劃輪換日誌文件 delaycompress –&amp;gt; 壓縮所有版本，除了當前和下一個最近的 errors “emailid” –&amp;gt; 給指定郵箱發送錯誤通知 missingok –&amp;gt; 如果日誌文件丟失，不要顯示錯誤 notifempty –&amp;gt; 如果日誌文件為空，則不輪換日誌文件 olddir “dir” –&amp;gt; 指定日誌文件的舊版本放在 「dir」 中 postrotate –&amp;gt; 引入一個在日誌被輪換後執行的腳本 prerotate –&amp;gt; 引入一個在日誌被輪換前執行的腳本 endscript –&amp;gt; 標記 prerotate 或 postrotate 腳本的結束 rotate ‘n’ –&amp;gt; 在輪換方案中包含日誌的 n 個版本 sharedscripts –&amp;gt; 對於整個日誌組只運行一次腳本 size=’logsize’ –&amp;gt; 在日誌大小大於 logsize（例如 100K，4M）時輪換 ex : /tmp/sample_output.log { size 1k create 700 root root rotate 4 compress } ex : nginx /var/log/nginx/*.log { daily missingok rotate 52 compress delaycompress notifempty create 640 nginx adm sharedscripts postrotate if [ -f /var/run/nginx.pid ]; then kill -USR1 `cat /var/run/nginx.pid` fi endscript }</summary></entry></feed>